# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got' expected '$expected'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}
# END DON'T REMOVE FROM test script.

get_project_id PROJECT
get_project_number PROJECT_NUMBER $PROJECT
# TODO: Script is pretty rudimentary, so make sure all of these variables are actually needed for test
DATASET_ID=[SET VALUE HERE]
FILTER=[SET VALUE HERE]
ORG_ID=[SET VALUE HERE]
OWNERS_GROUP_EMAIL=[SET VALUE HERE]
PROJECT_ID=[SET VALUE HERE]
READERS_GROUP_EMAIL=[SET VALUE HERE]
 

gcloud config set project ${PROJECT}

terraform init
# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform apply  \
   -var dataset_id=$DATASET_ID \
   -var filter=$FILTER \
   -var org_id=$ORG_ID \
   -var owners_group_email=$OWNERS_GROUP_EMAIL \
   -var project_id=$PROJECT_ID \
   -var readers_group_email=$READERS_GROUP_EMAIL \
   -auto-approve


section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v19.0.0 exists"
    #TODO: Double check this set of options for test
    evalTest 'bq ls | grep -c' "1"
section_close


# TODO: Make sure all of these variables are correct and actually need to be passed in.:
terraform destroy  \
   -var dataset_id=$DATASET_ID \
   -var exclusions=$EXCLUSIONS \
   -var filter=$FILTER \
   -var location=$LOCATION \
   -var org_id=$ORG_ID \
   -var owners_group_email=$OWNERS_GROUP_EMAIL \
   -var project_id=$PROJECT_ID \
   -var readers_group_email=$READERS_GROUP_EMAIL \
   -auto-approve


section_open "Test github.com/GoogleCloudPlatform/cloud-foundation-fabric//modules/bigquery-dataset?ref=v19.0.0 does not exists"
    #TODO: Double check this set of options for test
    evalTest 'bq ls | grep -c' "EXPECTERROR"
section_close


printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"